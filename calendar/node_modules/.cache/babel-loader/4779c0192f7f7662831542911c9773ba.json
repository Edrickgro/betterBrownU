{"ast":null,"code":"var _jsxFileName = \"/home/ivan/github/cs32/term-project-ckaleel-eguerre1-hzheng29-ihuerta-nmcgrego/calendar/src/Calendar.tsx\",\n    _s = $RefreshSig$();\n\nimport React, { useState } from 'react';\nimport Date from \"./Date\";\nimport getAllDates from './CalendarFB'; //TODO is there a way to have this be a global type so I don't have to reimport\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\n/**\n * Returns the construction of a full calendar app div object, in theory containing rows of dates and the events\n * contained within each.\n * @constructor\n */\nfunction Calendar() {\n  _s();\n\n  const [dateList, setDateList] = useState();\n  /**\n   * TODO REPLACE THIS FUNCTION WITH BACKEND STUFF WHEN READY.\n   * Currently filled with/returning fake dates.\n   */\n\n  function load_data() {\n    setDateList(getCalendarInfo());\n  }\n\n  function getCalendarInfo() {\n    let event1 = {\n      eventName: \"sport1\",\n      startTime: \"8:00am\",\n      endTime: \"10:00am\",\n      info: \"it's behind the OMAC\"\n    };\n    let event2 = {\n      eventName: \"sport2\",\n      startTime: \"5:00pm\",\n      endTime: \"7:30pm\",\n      info: \"brown school spirit rah rah\"\n    };\n    let event3 = {\n      eventName: \"acapella\",\n      startTime: \"9:00pm\",\n      endTime: \"11:00pm\",\n      info: \"we have so many acapella troupes at this school\"\n    };\n    let event4 = {\n      eventName: \"concert\",\n      startTime: \"3:00pm\",\n      endTime: \"7:00pm\",\n      info: \"I feel like we have more theaters than we use\"\n    };\n    let event5 = {\n      eventName: \"Bill Clinton Speaking??\",\n      startTime: \"5pm\",\n      endTime: \"6pm\",\n      info: \"located somewhere in watson\"\n    };\n    let dateInfoList = getAllDates();\n    let eventList1 = [event1, event2];\n    let eventList2 = [event3, event4];\n    let eventList3 = [event5];\n    let date1 = {\n      date: \"10/31/2001\",\n      events: eventList1\n    };\n    let date2 = {\n      date: \"2/13/2002\",\n      events: eventList2\n    };\n    let date3 = {\n      date: \"6/14/2002\",\n      events: eventList3\n    };\n    let fakeDatesArr = [date1, date2, date3];\n    fakeDatesArr = dateInfoList;\n    return fakeDatesArr;\n  }\n  /**\n   * Generate the date row objects based on what is gotten from the state.\n   */\n\n\n  function generateDates() {\n    if (dateList === undefined) {\n      return /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"Dates have not been generated yet\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 88,\n        columnNumber: 20\n      }, this);\n    } else {\n      let dates = [];\n\n      for (let i = 0; i < dateList.length; i++) {\n        dates.push( /*#__PURE__*/_jsxDEV(Date, {\n          date: dateList[i].date,\n          events: dateList[i].events\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 92,\n          columnNumber: 28\n        }, this));\n      }\n\n      return dates;\n    }\n  }\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"calendar\",\n    children: [/*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: load_data,\n      children: \"Click to load!\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 100,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      id: \"date-list\",\n      children: generateDates()\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 101,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 99,\n    columnNumber: 9\n  }, this);\n}\n\n_s(Calendar, \"UmKaGwdYWUSEFPt0oupRDe5Ouy4=\");\n\n_c = Calendar;\nexport default Calendar;\n\nvar _c;\n\n$RefreshReg$(_c, \"Calendar\");","map":{"version":3,"sources":["/home/ivan/github/cs32/term-project-ckaleel-eguerre1-hzheng29-ihuerta-nmcgrego/calendar/src/Calendar.tsx"],"names":["React","useState","Date","getAllDates","Calendar","dateList","setDateList","load_data","getCalendarInfo","event1","eventName","startTime","endTime","info","event2","event3","event4","event5","dateInfoList","eventList1","eventList2","eventList3","date1","date","events","date2","date3","fakeDatesArr","generateDates","undefined","dates","i","length","push"],"mappings":"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","sourcesContent":["import React, {useState} from 'react'\nimport Date from \"./Date\"\nimport CalendarFB from \"./Calendar\"\nimport getAllDates from './CalendarFB'\n\n//TODO is there a way to have this be a global type so I don't have to reimport\ndeclare interface event  {\n    eventName : string;\n    startTime : string;\n    endTime : string;\n    info : string;\n}\n\ntype dateInfo = {\n    date : string;\n    events : event[];\n}\n\n/**\n * Returns the construction of a full calendar app div object, in theory containing rows of dates and the events\n * contained within each.\n * @constructor\n */\nfunction Calendar () {\n    const [dateList, setDateList] = useState<dateInfo[]>()\n    /**\n     * TODO REPLACE THIS FUNCTION WITH BACKEND STUFF WHEN READY.\n     * Currently filled with/returning fake dates.\n     */\n\n    function load_data () {\n        setDateList(getCalendarInfo());\n    }\n\n    function getCalendarInfo() : dateInfo[]{\n        let event1 =  {\n            eventName: \"sport1\",\n            startTime: \"8:00am\",\n            endTime: \"10:00am\",\n            info: \"it's behind the OMAC\"\n        }\n        let event2 = {\n            eventName: \"sport2\",\n            startTime: \"5:00pm\",\n            endTime: \"7:30pm\",\n            info: \"brown school spirit rah rah\"\n        }\n        let event3 = {\n            eventName: \"acapella\",\n            startTime: \"9:00pm\",\n            endTime: \"11:00pm\",\n            info: \"we have so many acapella troupes at this school\"\n        }\n        let event4 = {\n            eventName: \"concert\",\n            startTime: \"3:00pm\",\n            endTime: \"7:00pm\",\n            info: \"I feel like we have more theaters than we use\"\n        }\n        let event5 = {\n            eventName: \"Bill Clinton Speaking??\",\n            startTime: \"5pm\",\n            endTime: \"6pm\",\n            info: \"located somewhere in watson\"\n        }\n\n\n        let dateInfoList : dateInfo[] = getAllDates()\n        let eventList1 : event[] = [event1, event2]\n        let eventList2 : event[] = [event3, event4]\n        let eventList3 : event[] = [event5]\n\n        let date1 : dateInfo = {date: \"10/31/2001\", events: eventList1}\n        let date2 : dateInfo = {date: \"2/13/2002\", events: eventList2}\n        let date3 : dateInfo = {date: \"6/14/2002\", events: eventList3}\n\n        let fakeDatesArr : dateInfo[] = [date1, date2, date3];\n\n        fakeDatesArr = dateInfoList\n        return fakeDatesArr;\n    }\n\n    /**\n     * Generate the date row objects based on what is gotten from the state.\n     */\n    function generateDates() {\n        if (dateList === undefined) {\n            return <p>Dates have not been generated yet</p>\n        } else {\n            let dates = [];\n            for (let i = 0; i<dateList.length; i++) {\n                dates.push(<Date date={dateList[i].date} events={dateList[i].events}/>);\n            }\n            return dates;\n        }\n    }\n\n    return (\n        <div className={\"calendar\"}>\n            <button onClick={load_data}>Click to load!</button>\n            <div id={\"date-list\"}>\n                {generateDates()}\n            </div>\n        </div>\n    )\n}\n\nexport default Calendar"]},"metadata":{},"sourceType":"module"}