{"ast":null,"code":"// Import the functions you need from the SDKs you need\nimport { initializeApp } from \"firebase/app\";\nimport { getDatabase, ref, set, onValue } from 'firebase/database'; // TODO: Add SDKs for Firebase products that you want to use\n// https://firebase.google.com/docs/web/setup#available-libraries\n// Your web app's Firebase configuration\n// For Firebase JS SDK v7.20.0 and later, measurementId is optional\n\nconst firebaseConfig = {\n  apiKey: \"AIzaSyDLBfzKNUMzRvsP_LeiRf31EJ-mJPVtf0o\",\n  authDomain: \"cs32termproject.firebaseapp.com\",\n  projectId: \"cs32termproject\",\n  storageBucket: \"cs32termproject.appspot.com\",\n  messagingSenderId: \"586091400920\",\n  appId: \"1:586091400920:web:a8a56afdc0bee2fd3ad1ad\",\n  measurementId: \"G-VP24Q6Q0E3\"\n}; // Structure of dates and events as defined in calendar.tsx\n\n// Initialize Firebase\nconst app = initializeApp(firebaseConfig);\nconst db = getDatabase();\n/**\n * Put an event into the database \n * \n * TODO: modify to just take a date object?\n * @param eventName \n * @param startTime \n * @param endTime \n * @param info \n * @param date \n * @param eventID \n */\n\nfunction writeEvent(eventName, startTime, endTime, info, date, eventID) {\n  const reference = ref(db, 'Dates/' + date + '/' + eventID);\n  set(reference, {\n    eventName: eventName,\n    startTime: startTime,\n    endTime: endTime,\n    info: info\n  });\n}\n/**\n * Given a string for a date, get all of the events for the date\n * @returns a list of event objects\n */\n\n\nfunction getDateEvents(date) {\n  const eventsRef = ref(db, 'Dates/' + date);\n  let retEvents = []; // get the events at this date\n\n  onValue(eventsRef, snapshot => {\n    // iterate and add each to return list\n    snapshot.forEach(childSnapshot => {\n      const currEvent = childSnapshot.val();\n      retEvents.push(currEvent.val);\n    });\n  });\n  return retEvents;\n}\n/**\n * Get all of the dates that have been added to the database.\n * @returns a list of dateInfo objects\n */\n\n\nfunction getAllDates() {\n  const datesRef = ref(db, 'Dates/');\n  const swRef = ref(db, datesRef.key + \"/\" + \"2022-04-29\");\n  const badRef = ref(db, datesRef.key + \"/\" + \"bad_ref\"); // TODO: child() doesn't work? shitty workaround\n\n  let retDates = []; // get all dates that have been added\n  //TODO: figure out how to loop through the fucking keys\n  // snapshot is of Dates\n\n  onValue(datesRef, dirSnapshot => {\n    console.log(\"Onvalue was called \" + dirSnapshot.key); // iterate and add each to return list\n    //iterating through dates\n\n    dirSnapshot.forEach(dateSnapshot => {\n      //TODO: could be an error depending on how date directories work \"'/' creates an additional layer\"\n      // console.log(\"child of child\" + dateSnapshot.key) // TODO: \n      // add each event to date's event list\n      let dateEvents = [];\n      dateSnapshot.forEach(eventSnapshot => {\n        console.log(\"event val: \" + eventSnapshot.val());\n        const currEvent = eventSnapshot.val();\n        const newEvent = {\n          startTime: currEvent.startTime,\n          endTime: currEvent.endTime,\n          eventName: currEvent.eventName,\n          info: currEvent.info\n        };\n        dateEvents.push(newEvent);\n      }); // create date, add eventList to it, add to dateList\n\n      const newDate = {\n        date: dateSnapshot.key,\n        events: dateEvents\n      };\n      retDates.push(newDate);\n    });\n  });\n  return retDates;\n}\n\nwriteEvent(\"Spring Weekend\", \"18:30\", \"22:30\", \"Annual thing\", \"2022-04-29\", \"0\");\nwriteEvent(\"lunch\", \"12:00\", \"13:00\", \"food optional\", \"2022-04-29\", \"1\"); // TODO: figure out what to export\n\nexport { getAllDates, writeEvent };","map":{"version":3,"sources":["/home/ivan/github/cs32/term-project-ckaleel-eguerre1-hzheng29-ihuerta-nmcgrego/calendar/src/CalendarFB.ts"],"names":["initializeApp","getDatabase","ref","set","onValue","firebaseConfig","apiKey","authDomain","projectId","storageBucket","messagingSenderId","appId","measurementId","app","db","writeEvent","eventName","startTime","endTime","info","date","eventID","reference","getDateEvents","eventsRef","retEvents","snapshot","forEach","childSnapshot","currEvent","val","push","getAllDates","datesRef","swRef","key","badRef","retDates","dirSnapshot","console","log","dateSnapshot","dateEvents","eventSnapshot","newEvent","newDate","events"],"mappings":"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","sourcesContent":["// Import the functions you need from the SDKs you need\nimport { Console } from \"console\";\nimport { initializeApp } from \"firebase/app\";\nimport { getDatabase, ref, set, onValue} from 'firebase/database';\n\n\n// TODO: Add SDKs for Firebase products that you want to use\n// https://firebase.google.com/docs/web/setup#available-libraries\n\n// Your web app's Firebase configuration\n// For Firebase JS SDK v7.20.0 and later, measurementId is optional\nconst firebaseConfig = {\n  apiKey: \"AIzaSyDLBfzKNUMzRvsP_LeiRf31EJ-mJPVtf0o\",\n  authDomain: \"cs32termproject.firebaseapp.com\",\n  projectId: \"cs32termproject\",\n  storageBucket: \"cs32termproject.appspot.com\",\n  messagingSenderId: \"586091400920\",\n  appId: \"1:586091400920:web:a8a56afdc0bee2fd3ad1ad\",\n  measurementId: \"G-VP24Q6Q0E3\"\n};\n\n// Structure of dates and events as defined in calendar.tsx\ntype dateInfo = {\n  date : string;\n  // each date has many events\n  events : event[];\n}\ntype event = {\n  eventName : string;\n  startTime : string;\n  endTime : string;\n  info : string;\n}\n\n// Initialize Firebase\nconst app = initializeApp(firebaseConfig);\nconst db = getDatabase();\n\n/**\n * Put an event into the database \n * \n * TODO: modify to just take a date object?\n * @param eventName \n * @param startTime \n * @param endTime \n * @param info \n * @param date \n * @param eventID \n */\nfunction writeEvent(eventName : string, startTime : string, endTime : string, info: string, date: string, eventID: string) : void{ \n  const reference = ref(db, 'Dates/' + date + '/' + eventID);\n\n  set(reference, {\n    eventName: eventName,\n    startTime: startTime,\n    endTime: endTime,\n    info: info\n  })\n}\n\n/**\n * Given a string for a date, get all of the events for the date\n * @returns a list of event objects\n */\nfunction getDateEvents(date : string) : event[] {\n    const eventsRef = ref(db, 'Dates/' + date)\n    let retEvents : event[] = []\n    // get the events at this date\n    onValue(eventsRef, (snapshot) => {\n      // iterate and add each to return list\n      snapshot.forEach((childSnapshot) => {\n        const currEvent = childSnapshot.val();\n        retEvents.push(currEvent.val);\n      })  \n    });\n    return retEvents\n}\n\n/**\n * Get all of the dates that have been added to the database.\n * @returns a list of dateInfo objects\n */\nfunction getAllDates() : dateInfo[] { \n  const datesRef = ref(db, 'Dates/')\n  const swRef = ref(db, datesRef.key + \"/\" + \"2022-04-29\")\n  const badRef = ref(db, datesRef.key + \"/\" + \"bad_ref\")\n  // TODO: child() doesn't work? shitty workaround\n  let retDates : dateInfo[] = []\n  // get all dates that have been added\n\n  //TODO: figure out how to loop through the fucking keys\n  // snapshot is of Dates\n  onValue(datesRef, (dirSnapshot) => {\n    console.log(\"Onvalue was called \" + dirSnapshot.key)\n    // iterate and add each to return list\n    //iterating through dates\n    dirSnapshot.forEach((dateSnapshot) => {\n      //TODO: could be an error depending on how date directories work \"'/' creates an additional layer\"\n      // console.log(\"child of child\" + dateSnapshot.key) // TODO: \n      // add each event to date's event list\n      let dateEvents : event[] = [];\n      dateSnapshot.forEach((eventSnapshot) => {\n        console.log(\"event val: \" + eventSnapshot.val())\n        const currEvent = eventSnapshot.val();\n        const newEvent = <event>({\n          startTime: currEvent.startTime,\n          endTime: currEvent.endTime,\n          eventName: currEvent.eventName,\n          info: currEvent.info\n        });\n        dateEvents.push(newEvent)\n      })\n      // create date, add eventList to it, add to dateList\n      const newDate =  <dateInfo>({\n        date: dateSnapshot.key,\n        events: dateEvents\n      })\n      retDates.push(newDate)\n    })  \n  });\n  return retDates\n}\n\nwriteEvent(\"Spring Weekend\", \"18:30\", \"22:30\", \"Annual thing\", \"2022-04-29\", \"0\");\nwriteEvent(\"lunch\", \"12:00\", \"13:00\", \"food optional\", \"2022-04-29\", \"1\");\n\n// TODO: figure out what to export\nexport {getAllDates, writeEvent}"]},"metadata":{},"sourceType":"module"}